# 
msgid ""
msgstr ""
"Project-Id-Version: Understanding JSON Schema 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-05-09 06:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/about.rst:4
msgid "What is a schema?"
msgstr ""

#: ../../source/about.rst:6
msgid ""
"If you've ever used XML Schema, RelaxNG or ASN.1 you probably already know "
"what a schema is and you can happily skip along to the next section.  If all"
" that sounds like gobbledygook to you, you've come to the right place.  To "
"define what JSON Schema is, we should probably first define what JSON is."
msgstr ""

#: ../../source/about.rst:12
msgid ""
"JSON stands for \"JavaScript Object Notation\", a simple data interchange "
"format.  It began as a notation for the world wide web. Since JavaScript "
"exists in most web browsers, and JSON is based on JavaScript, it's very easy"
" to support there.  However, it has proven useful enough and simple enough "
"that it is now used in many other contexts that don't involve web surfing."
msgstr ""

#: ../../source/about.rst:19
msgid "At its heart, JSON is built on the following data structures:"
msgstr ""

#: ../../source/about.rst:21
msgid "object::"
msgstr ""

#: ../../source/about.rst:25
msgid "array::"
msgstr ""

#: ../../source/about.rst:29
msgid "number::"
msgstr ""

#: ../../source/about.rst:31
msgid "42 3.1415926"
msgstr ""

#: ../../source/about.rst:34
msgid "string::"
msgstr ""

#: ../../source/about.rst:38
msgid "boolean::"
msgstr ""

#: ../../source/about.rst:40
msgid "true false"
msgstr ""

#: ../../source/about.rst:43
msgid "null::"
msgstr ""

#: ../../source/about.rst:45
msgid "null"
msgstr ""

#: ../../source/about.rst:47
msgid ""
"These types have analogs in most programming languages, though they may go "
"by different names."
msgstr ""

#: ../../source/about.rst:108
msgid ""
"With these simple data types, all kinds of structured data can be "
"represented.  With that great flexibility comes great responsibility, "
"however, as the same concept could be represented in myriad ways.  For "
"example, you could imagine representing information about a person in JSON "
"in different ways::"
msgstr ""

#: ../../source/about.rst:132
msgid ""
"Both representations are equally valid, though one is clearly more formal "
"than the other.  The design of a record will largely depend on its intended "
"use within the application, so there's no right or wrong answer here.  "
"However, when an application says \"give me a JSON record for a person\", "
"it's important to know exactly how that record should be organized.  For "
"example, we need to know what fields are expected, and how the values are "
"represented.  That's where JSON Schema comes in.  The following JSON Schema "
"fragment describes how the second example above is structured.  Don't worry "
"too much about the details for now.  They are explained in subsequent "
"chapters."
msgstr ""

#: ../../source/about.rst:184
msgid ""
"You may have noticed that the JSON Schema itself is written in JSON. It is "
"data itself, not a computer program.  It's just a declarative format for "
"\"describing the structure of other data\".  This is both its strength and "
"its weakness (which it shares with other similar schema languages).  It is "
"easy to concisely describe the surface structure of data, and automate "
"validating data against it.  However, since a JSON Schema can't contain "
"arbitrary code, there are certain constraints on the relationships between "
"data elements that can't be expressed.  Any \"validation tool\" for a "
"sufficiently complex data format, therefore, will likely have two phases of "
"validation: one at the schema (or structural) level, and one at the semantic"
" level.  The latter check will likely need to be implemented using a more "
"general-purpose programming language."
msgstr ""
