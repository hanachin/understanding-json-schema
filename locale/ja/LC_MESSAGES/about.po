#
msgid ""
msgstr ""
"Project-Id-Version: Understanding JSON Schema 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-05-09 06:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/about.rst:4
msgid "What is a schema?"
msgstr "Schemaとは?"

#: ../../source/about.rst:6
msgid ""
"If you've ever used XML Schema, RelaxNG or ASN.1 you probably already know "
"what a schema is and you can happily skip along to the next section.  If all"
" that sounds like gobbledygook to you, you've come to the right place.  To "
"define what JSON Schema is, we should probably first define what JSON is."
msgstr ""
"もしあなたがXML Schemaか、RelaxNGか、ASN.1を使ったことがあるなら"
"あなたはたぶんschemaとは何なのか既にしっているので、次のセクションまで読み飛ばしても大丈夫です。"
"もし、この言葉が難しく聞こえるなら、あなたはこの章を読むのにふさわしいでしょう。"
"JSON Schemaとは何かを定義する前に、我々はまずJSONとは何かについて定義したほうがよいでしょう。"

#: ../../source/about.rst:12
msgid ""
"JSON stands for \"JavaScript Object Notation\", a simple data interchange "
"format.  It began as a notation for the world wide web. Since JavaScript "
"exists in most web browsers, and JSON is based on JavaScript, it's very easy"
" to support there.  However, it has proven useful enough and simple enough "
"that it is now used in many other contexts that don't involve web surfing."
msgstr ""
"JSONは \"JavaScript Object Notation\"の略で、シンプルなデータ交換用のフォーマットです。"
"JSONはワールドワイドウェブのための記法として生まれました。"
"JSONはJavaScriptをベースにしているので、JavaScriptがほとんどのウェブブラウザで使われるようになってから、ウェブブラウザ上でJSONをサポートするのは非常に簡単でした。"
"いずれにしても、今ではウェブサーフィンのみならず様々な場面で使われていることが、それが十分使いやすく十分シンプルなことを証明してくれているでしょう。"

#: ../../source/about.rst:19
msgid "At its heart, JSON is built on the following data structures:"
msgstr "本質的には、JSONは次のようなデータ構造で成り立っています"

#: ../../source/about.rst:21
msgid "object::"
msgstr "オブジェクト::"

#: ../../source/about.rst:25
msgid "array::"
msgstr "配列::"

#: ../../source/about.rst:29
msgid "number::"
msgstr "数値::"

#: ../../source/about.rst:31
msgid "42 3.1415926"
msgstr ""

#: ../../source/about.rst:34
msgid "string::"
msgstr "文字列::"

#: ../../source/about.rst:38
msgid "boolean::"
msgstr "真偽値::"

#: ../../source/about.rst:40
msgid "true false"
msgstr ""

#: ../../source/about.rst:43
msgid "null::"
msgstr "null::"

#: ../../source/about.rst:45
msgid "null"
msgstr ""

#: ../../source/about.rst:47
msgid ""
"These types have analogs in most programming languages, though they may go "
"by different names."
msgstr ""
"これらの型はほとんどのプログラミング言語でみられますが、微妙に異なる名前で呼ばれています。"

#: ../../source/about.rst:108
msgid ""
"With these simple data types, all kinds of structured data can be "
"represented.  With that great flexibility comes great responsibility, "
"however, as the same concept could be represented in myriad ways.  For "
"example, you could imagine representing information about a person in JSON "
"in different ways::"
msgstr ""
"このシンプルなデータ型は、全ての種類の構造化されたデータを表現できます。"
"しかし、その素晴らしい柔軟性は大きな責任をもたらしました、"
"同じ概念を無数の方法で表現することが出来たからです。"
"例えば、個人の情報についてJSONで表現しようとしたとき、いくつもの方法でそれを表現することが想像できるでしょう::"

#: ../../source/about.rst:132
msgid ""
"Both representations are equally valid, though one is clearly more formal "
"than the other.  The design of a record will largely depend on its intended "
"use within the application, so there's no right or wrong answer here.  "
"However, when an application says \"give me a JSON record for a person\", "
"it's important to know exactly how that record should be organized.  For "
"example, we need to know what fields are expected, and how the values are "
"represented.  That's where JSON Schema comes in.  The following JSON Schema "
"fragment describes how the second example above is structured.  Don't worry "
"too much about the details for now.  They are explained in subsequent "
"chapters."
msgstr ""
"2つの表現は同じものを表現していますが、片方はもう片方に比べるとより形式的なのが明らかだと思います。"
"レコードをどのように設計するかは、アプリケーションの中でどう使おうと考えているかに大きく依存しています、"
"なので、ここでは正しい答えも間違った答えもないのです。"
"一方で、もしアプリケーションが\"僕に個人情報についてのJSONをくれよ\"と言ってきたとき、"
"レコードがどのように構成されているか知ることは非常に大切です。"
"例えば、我々はどの項目が期待されているか、そしてそれぞれの値がどのように表現されるかについても知る必要があります、"
"これがJSON Schemaが必要な理由です。"
"次のJSON Schemaの断片は、2つめの例がどのように構造化されているかを記述しています。"
"今は詳細について分からなくても大丈夫です。"
"細かいことは後ろの章で説明します。"

#: ../../source/about.rst:184
msgid ""
"You may have noticed that the JSON Schema itself is written in JSON. It is "
"data itself, not a computer program.  It's just a declarative format for "
"\"describing the structure of other data\".  This is both its strength and "
"its weakness (which it shares with other similar schema languages).  It is "
"easy to concisely describe the surface structure of data, and automate "
"validating data against it.  However, since a JSON Schema can't contain "

"arbitrary code, there are certain constraints on the relationships between "
"data elements that can't be expressed.  Any \"validation tool\" for a "
"sufficiently complex data format, therefore, will likely have two phases of "
"validation: one at the schema (or structural) level, and one at the semantic"
" level.  The latter check will likely need to be implemented using a more "
"general-purpose programming language."
msgstr ""
"あなたはJSON Schema自身がJSONによって書かれているのに気づいたでしょう。"
"それはデータ自身であって、コンピュータープログラムではありません。"
"それはただ\"他のデータのデータ構造を説明したもの\"を宣言するためのフォーマットです。"
"これはJSON Schemaの長所と短所です(似たようなスキーマ言語も同じ問題を共有しています)。"
"それはデータ構造の上っ面について簡潔に説明したり、それに違反したデータを自動でバリデーションすることを容易にします。"

"一方でJSON Schemaはコードを含むことができません、"
"いかなる十分複雑なデータのための\"バリデーションツール\"も、"
"バリデーションについて2つの側面を持つでしょう: 1つはスキーマ(あるいは構造)のレベルと、もう1つは意味的なレベルです。"
"後者のチェックを実装するためには、より汎用的なプログラミング言語を使うことになるでしょう。"
